import paho.mqtt.client as mqtt
import json
import time
import random


def generate_data():
    """
    Generates data for test. It is used to generate a test data that can be sent to HiveMQ server.


    @return JSON string of sensor data to be sent to HiveMQ server.
    """
    sensor_id = "sensor_" + str(random.randint(1, 10))
    sensor_type = "type_" + str(random.randint(1, 3))
    value = random.uniform(0, 100)
    data = {"sensor_id": sensor_id, "sensor_type": sensor_type, "value": value}
    return json.dumps(data)


def publish_data(client, topic):
    """
    Publish data to HiveMQ. This is a loop that generates data and publishes it to HiveMQ. In the loop the data is generated by generate_data ()

    @param client - Client to publish to HiveMQ
    @param topic - Topic to publish data to.
    """
    # Publishes data to the topic.
    while True:
        data = generate_data()
        client.publish(topic, data)
        time.sleep(0.1)
        print("Messagge sent")


if __name__ == "__main__":
    # HiveMQ broker connection information
    broker_address = "300de1d0fce741319264fb560810a851.s2.eu.hivemq.cloud"
    broker_port = 8883
    topic = "FabriTopics/sensor_data_ikerlan"
    client_id = "fabriPublisher"
    client_pwd = "fabriPublisher96!"

    # HiveMQ broker connection
    client = mqtt.Client()
    client.tls_set()  # <--- even without arguments
    client.username_pw_set(username=client_id, password=client_pwd)
    # Debuggin purpose
    print("Connecting...")
    client.connect(broker_address, broker_port)
    # Inicio de la publicaciÃ³n de datos
    publish_data(client, topic)
